import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import "./MealFirst.css";
import MealModal from "../../components/MealModal";

import axios from "axios";
import { baseURL } from "../../api/baseURL";

const MealFirst = () => {
  const navigate = useNavigate();
  const params = useParams();

  const today = new Date(params.date);
  const week = ["Ïùº", "Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†"];
  const dayOfWeek = week[today.getDay()];
  const formattedDate = `${
    today.getMonth() + 1
  }Ïõî ${today.getDate()}Ïùº ${dayOfWeek}ÏöîÏùº`;

  useEffect(() => {
    window.scrollTo(0, 0);
  }, []);

  const [mealType, setMealType] = useState(1); // Í∏∞Î≥∏Í∞í: ÏïÑÏπ®
  const [mealItems, setMealItems] = useState([]);
  const [mealData, setMealData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // ÌäπÏ†ï ÎÇ†Ïßú ÏãùÏÇ¨ Í∏∞Î°ù Ï°∞Ìöå API ---------------------------------------
  const fetchMealData = async () => {
    try {
      const response = await axios.get(
        `${baseURL}meal/${params.username}/date/?date=${params.date}`
      );
      setMealData(response.data);
    } catch (error) {
      console.error("ÏãùÏÇ¨ Í∏∞Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù: ", error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchMealData();
  }, []);

  // ÏòàÏãú Îç∞Ïù¥ÌÑ∞ mymealData
  const myMealData = {
    1: {
      meal: "ÏïÑÏπ®",
      foods: [],
    },
    2: {
      meal: "Ï†êÏã¨",
      foods: [],
    },
    3: {
      meal: "Ï†ÄÎÖÅ",
      foods: [],
    },
    4: {
      meal: "Í∞ÑÏãù",
      foods: [],
    },
  };

  const extractMealInfo = (mealData) => {
    const result = {
      morning: [],
      lunch: [],
      dinner: [],
      snack: [],
    };

    const extractFromList = (list, key) => {
      if (list && Array.isArray(list)) {
        list.forEach((meal) => {
          if (result[key] != null) {
            result[key].push({
              name: meal.name,
              good_ingredients: meal.ingredient_details?.likes || [],
              bad_ingredients: meal.ingredient_details?.dislikes || [],
              soso_ingredients: meal.ingredient_details?.soso || [],
              foodId: meal.id,
            });
          }
        });
      }
    };

    extractFromList(mealData?.morning_list, "morning");
    extractFromList(mealData?.lunch_list, "lunch");
    extractFromList(mealData?.dinner_list, "dinner");
    extractFromList(mealData?.snack_list, "snack");

    return result;
  };

  const mealInfo = extractMealInfo(mealData);

  myMealData[1].foods = mealInfo.morning; // 1 is breakfast
  myMealData[2].foods = mealInfo.lunch; // 2 is lunch
  myMealData[3].foods = mealInfo.dinner; // 3 is dinner
  myMealData[4].foods = mealInfo.snack; // 4 is snack

  const selectedMeal = myMealData[mealType];

  // ÌäπÏ†ï ÎÇ†Ïßú ÏãùÏÇ¨ Í∏∞Î°ù ÏÇ≠Ï†ú API -----------------------------------------
  const deleteMealFromDB = async (name, id) => {
    try {
      const response = await axios.delete(
        `${baseURL}/meal/${params.username}/${id}`
      );
      if (response.status !== 200 && response.status !== 204) {
        throw new Error("ÏùåÏãùÏùÑ ÏÇ≠Ï†úÌïòÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
      alert(`${name} ÏùÑ/Î•º ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§. üßπüßπ`);

      // ÏÉÅÌÉúÏóêÏÑú ÏãùÏÇ¨ ÏÇ≠Ï†ú
      handleRemoveMeal(name);
    } catch (error) {
      console.error(error.message);
    }
  };

  // ÎÅºÎãà ÌÅ¥Î¶≠ Ìï®Ïàò
  const handleClickMeal = (e) => {
    const { value } = e.target;
    setMealType(Number(value)); // ÌÅ¥Î¶≠Îêú Î≤ÑÌäºÏùò Í∞íÏùÑ ÏÉÅÌÉúÏóê Ï†ÄÏû•
  };

  const handleRemoveMeal = (name) => {
    setMealItems((prevItems) => prevItems.filter((item) => item.name !== name));
  };

  // ÏàòÏ†ïÌïòÍ∏∞ Î≤ÑÌäº Ìï®Ïàò
  const handleEditMeal = (id) => {
    const selectedFood = selectedMeal.foods[id];
    navigate(`/meal/second_edit/${params.username}/${params.date}`, {
      state: {
        foodId: id,
      },
    });
  };

  // ÏÇ≠Ï†ú modal ---------------------------------------------
  const [showModal, setShowModal] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [foodId, setFoodId] = useState(null);

  const handleRemoveMealButton = (name, id) => {
    setItemToDelete(name);
    setFoodId(id);
    setShowModal(true); // Î™®Îã¨Ï∞Ω ÎùÑÏõÄ
  };

  const handleCancel = () => {
    setShowModal(false);
    setItemToDelete(null);
    setFoodId(null);
  };

  const handleConfirm = async () => {
    if (itemToDelete !== null) {
      // DBÏóêÏÑú ÏÇ≠Ï†ú
      await deleteMealFromDB(itemToDelete, foodId);

      // Î™®Îã¨ Îã´Í∏∞
      setShowModal(false);
      setItemToDelete(null);
      setFoodId(null);
      fetchMealData();
    }
  };

  const renderDeleteModal = () =>
    showModal && (
      <MealModal
        title="ÏïåÎ¶º"
        message={`${itemToDelete} ÏùÑ/Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`}
        onCancel={handleCancel}
        onConfirm={handleConfirm}
        confirm="ÏÇ≠Ï†ú"
      />
    );

  // Ï∂îÍ∞Ä modal ---------------------------------------------
  const [showAddModal, setShowAddModal] = useState(false);
  const [newMealName, setNewMealName] = useState("");

  const handleAddMealButton = () => {
    setShowAddModal(true);
  };

  const handleAddMealCancel = () => {
    setShowAddModal(false);
    setNewMealName("");
  };

  const handleAddMealNext = () => {
    let mealTypeToString;
    switch (mealType) {
      case 1:
        mealTypeToString = "morning";
        break;
      case 2:
        mealTypeToString = "lunch";
        break;
      case 3:
        mealTypeToString = "dinner";
        break;
      case 4:
        mealTypeToString = "snack";
        break;
    }
    if (newMealName.trim()) {
      navigate(`/meal/second_new/${params.username}/${params.date}`, {
        state: { newMeal: newMealName, mealType: mealTypeToString },
      });
      setShowAddModal(false);
    } else {
      alert("Î©îÎâ¥ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî.");
    }
  };

  const renderAddModal = () =>
    showAddModal && (
      <MealModal
        title="ÏãùÏÇ¨ ÏûÖÎ†•ÌïòÍ∏∞"
        message={
          <>
            {selectedMeal.meal}
            <div className="MFinput">
              <input
                type="text"
                placeholder="Î©îÎâ¥Î•º 5Ïûê Ïù¥ÎÇ¥Î°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                value={newMealName}
                maxLength="5"
                onChange={(e) => setNewMealName(e.target.value)}
              />
            </div>
          </>
        }
        onCancel={handleAddMealCancel}
        onConfirm={handleAddMealNext}
        confirm="Îã§Ïùå"
      />
    );

  return (
    <div className="MFbackground">
      <header className="blackHeader">
        <img alt="back" onClick={() => navigate(-1)} src="/images/back.png" />
        <h2 className="MFh2">Ïò§ÎäòÏùò ÏãùÏÇ¨</h2>
      </header>
      <div className="MFdate">{formattedDate}</div>
      <main className="MFmain">
        <div className="MFmenu">
          <span className="MFpurpleDiv">ÎÅºÎãà</span>
          <button
            onClick={handleClickMeal}
            value="1"
            className={mealType === 1 ? "MFselected" : ""}
          >
            ÏïÑÏπ®
          </button>
          <button
            onClick={handleClickMeal}
            value="2"
            className={mealType === 2 ? "MFselected" : ""}
          >
            Ï†êÏã¨
          </button>
          <button
            onClick={handleClickMeal}
            value="3"
            className={mealType === 3 ? "MFselected" : ""}
          >
            Ï†ÄÎÖÅ
          </button>
          <button
            onClick={handleClickMeal}
            value="4"
            className={mealType === 4 ? "MFselected" : ""}
          >
            Í∞ÑÏãù
          </button>
        </div>
        <hr />
        <div className="MFcontents">
          <div className="MFmealList">
            {selectedMeal &&
            selectedMeal.foods &&
            selectedMeal.foods.length > 0 ? (
              selectedMeal.foods.map((food, index) => (
                <div key={index} className="MFmealOne">
                  <div className="MFmealDiv" value={food.name}>
                    {food.name}
                  </div>
                  <ul className="MFingredients">
                    <li className="MFgoodIngredients">
                      {food.good_ingredients.map((ingredient, i) => (
                        <span key={i}>
                          {ingredient}
                          {"  "}
                        </span>
                      ))}
                    </li>
                    <li className="MFbadIngredients">
                      {food.bad_ingredients.map((ingredient, i) => (
                        <span key={i}>
                          {ingredient}
                          {"  "}
                        </span>
                      ))}
                    </li>
                    <li className="MFsosoIngredients">
                      {food.soso_ingredients.map((ingredient, i) => (
                        <span key={i}>
                          {ingredient}
                          {"  "}
                        </span>
                      ))}
                    </li>
                  </ul>
                  <div className="MFmealbtns">
                    <button
                      className="MFedit-button"
                      onClick={() => handleEditMeal(food.foodId)}
                    >
                      <img alt="edit" src="/images/edit.png" />
                    </button>
                    <button
                      className="MFremove-button"
                      onClick={() =>
                        handleRemoveMealButton(food.name, food.foodId)
                      }
                    >
                      <img alt="remove" src="/images/remove.png" />
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <span></span>
            )}
          </div>
        </div>

        {/* Î™®Îã¨ Î†åÎçîÎßÅ */}
        {renderDeleteModal()}
        {renderAddModal()}

        <div className="MFbtns">
          <button className="MFaddMealBtn" onClick={handleAddMealButton}>
            Ï∂îÍ∞ÄÌïòÍ∏∞
          </button>
        </div>
      </main>
    </div>
  );
};

export default MealFirst;
